services:
  # PostgreSQL 資料庫 with pgvector
  postgres:
    image: pgvector/pgvector:pg16
    container_name: aichatbot-postgres
    environment:
      POSTGRES_USER: aichatbot
      POSTGRES_PASSWORD: aichatbot_password
      POSTGRES_DB: aichatbot_admin
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d  # 初始化腳本
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aichatbot"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis (選用，用於 Celery 任務隊列)
  redis:
    image: redis:7-alpine
    container_name: aichatbot-redis
    ports:
      - "6381:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # pgAdmin (選用，資料庫管理介面)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: aichatbot-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@aichatbot.com
      PGADMIN_DEFAULT_PASSWORD: admin
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      - postgres

  # Embedding API Service
  embedding-api:
    build: ./embedding-service
    container_name: aichatbot-embedding-api
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      REDIS_HOST: redis
      REDIS_PORT: 6379
    ports:
      - "5001:5000"
    depends_on:
      - redis
    restart: unless-stopped

  # 知識庫管理後台 - API
  knowledge-admin-api:
    build: ./knowledge-admin/backend
    container_name: aichatbot-knowledge-admin-api
    environment:
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: aichatbot_admin
      DB_USER: aichatbot
      DB_PASSWORD: aichatbot_password
      EMBEDDING_API_URL: http://embedding-api:5000/api/v1/embeddings
      PROJECT_ROOT: /app
      RAG_API_URL: http://rag-orchestrator:8100
      OPENAI_API_KEY: ${OPENAI_API_KEY}
    ports:
      - "8000:8000"
    volumes:
      # 開發模式：動態掛載後端程式碼
      - ./knowledge-admin/backend/app.py:/app/app.py
      - ./knowledge-admin/backend/routes_test_scenarios.py:/app/routes_test_scenarios.py
      # 測試資料與輸出
      - ./test_scenarios_smoke.xlsx:/app/test_scenarios_smoke.xlsx:ro
      - ./test_scenarios_full.xlsx:/app/test_scenarios_full.xlsx:ro
      - ./output:/app/output
      - ./scripts:/app/scripts:ro
    depends_on:
      - postgres
      - embedding-api
      - rag-orchestrator
    restart: unless-stopped

  # 知識庫管理後台 - 前端（開發模式）
  knowledge-admin-web:
    build:
      context: ./knowledge-admin/frontend
      target: builder  # 使用 builder stage（包含 Node.js）
    container_name: aichatbot-knowledge-admin-web
    command: npm run dev
    ports:
      - "8087:5173"  # Vite 開發伺服器埠
    volumes:
      # 掛載原始碼以支援熱重載
      - ./knowledge-admin/frontend/src:/app/src
      - ./knowledge-admin/frontend/public:/app/public
      - ./knowledge-admin/frontend/index.html:/app/index.html
      - ./knowledge-admin/frontend/vite.config.js:/app/vite.config.js
      - ./knowledge-admin/frontend/package.json:/app/package.json
    environment:
      - NODE_ENV=development
    depends_on:
      - knowledge-admin-api
    restart: unless-stopped

  # 知識庫管理後台 - 前端（正式環境）
  # 使用方式：docker-compose up knowledge-admin-web-prod
  knowledge-admin-web-prod:
    build: ./knowledge-admin/frontend
    container_name: aichatbot-knowledge-admin-web-prod
    ports:
      - "8081:80"
    volumes:
      - ./knowledge-admin/frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - knowledge-admin-api
    restart: unless-stopped
    profiles:
      - production  # 需明確指定 profile 才會啟動

  # RAG Orchestrator (Phase 2)
  rag-orchestrator:
    build: ./rag-orchestrator
    container_name: aichatbot-rag-orchestrator
    environment:
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_MODEL: gpt-3.5-turbo  # 預設 LLM 模型（速度快 2-3倍，成本低 70%）
      # 意圖分類器配置
      INTENT_CLASSIFIER_MODEL: ${INTENT_CLASSIFIER_MODEL:-gpt-3.5-turbo}  # 意圖分類模型
      INTENT_CLASSIFIER_TEMPERATURE: ${INTENT_CLASSIFIER_TEMPERATURE:-0.1}  # 意圖分類溫度
      INTENT_CLASSIFIER_MAX_TOKENS: ${INTENT_CLASSIFIER_MAX_TOKENS:-500}  # 意圖分類最大 tokens
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: aichatbot_admin
      DB_USER: aichatbot
      DB_PASSWORD: aichatbot_password
      EMBEDDING_API_URL: http://embedding-api:5000/api/v1/embeddings
      KNOWLEDGE_GEN_MODEL: ${KNOWLEDGE_GEN_MODEL:-gpt-3.5-turbo}  # AI 知識生成專用模型
      # Redis 緩存配置
      REDIS_HOST: redis
      REDIS_PORT: 6379
      CACHE_ENABLED: ${CACHE_ENABLED:-true}  # 是否啟用緩存
      CACHE_TTL_QUESTION: ${CACHE_TTL_QUESTION:-3600}  # 問題緩存 TTL（秒）
      CACHE_TTL_VECTOR: ${CACHE_TTL_VECTOR:-7200}  # 向量緩存 TTL（秒）
      CACHE_TTL_RAG_RESULT: ${CACHE_TTL_RAG_RESULT:-1800}  # RAG 結果緩存 TTL（秒）
      # LLM 答案合成配置（整合多個 SOP 項目）
      ENABLE_ANSWER_SYNTHESIS: ${ENABLE_ANSWER_SYNTHESIS:-true}  # 啟用答案合成
      SYNTHESIS_THRESHOLD: ${SYNTHESIS_THRESHOLD:-0.99}  # 合成閾值（SOP 相似度為 1.0，設為 0.99）
      SYNTHESIS_MIN_RESULTS: ${SYNTHESIS_MIN_RESULTS:-2}  # 最少 2 個來源才合成
      SYNTHESIS_MAX_RESULTS: ${SYNTHESIS_MAX_RESULTS:-5}  # 最多合成 5 個來源
      SOP_SIMILARITY_SCORE: ${SOP_SIMILARITY_SCORE:-0.70}  # SOP 相似度分數（調低以觸發合成）
      # RAG 檢索配置
      RAG_SIMILARITY_THRESHOLD: ${RAG_SIMILARITY_THRESHOLD:-0.6}  # RAG 檢索相似度閾值
      # 信心度評估配置
      CONFIDENCE_HIGH_THRESHOLD: ${CONFIDENCE_HIGH_THRESHOLD:-0.85}  # 高信心度閾值
      CONFIDENCE_MEDIUM_THRESHOLD: ${CONFIDENCE_MEDIUM_THRESHOLD:-0.70}  # 中等信心度閾值
      # 條件式優化配置
      FAST_PATH_THRESHOLD: ${FAST_PATH_THRESHOLD:-0.75}  # 快速路徑閾值
      TEMPLATE_MIN_SCORE: ${TEMPLATE_MIN_SCORE:-0.55}  # 模板最低信心度
      TEMPLATE_MAX_SCORE: ${TEMPLATE_MAX_SCORE:-0.75}  # 模板最高信心度
      LLM_PARAM_INJECTION_TEMP: ${LLM_PARAM_INJECTION_TEMP:-0.1}  # 參數注入溫度
      LLM_SYNTHESIS_TEMP: ${LLM_SYNTHESIS_TEMP:-0.5}  # 答案合成溫度
      # 意圖建議配置
      INTENT_SUGGESTION_TEMP: ${INTENT_SUGGESTION_TEMP:-0.2}  # 意圖建議溫度
      INTENT_SUGGESTION_MAX_TOKENS: ${INTENT_SUGGESTION_MAX_TOKENS:-800}  # 意圖建議最大 tokens
      # 未釐清問題配置
      UNCLEAR_SEMANTIC_THRESHOLD: ${UNCLEAR_SEMANTIC_THRESHOLD:-0.80}  # 語意相似度閾值
      UNCLEAR_PINYIN_THRESHOLD: ${UNCLEAR_PINYIN_THRESHOLD:-0.80}  # 拼音相似度閾值
    ports:
      - "8100:8100"
    volumes:
      # 開發模式：動態掛載程式碼以支援熱重載
      - ./rag-orchestrator/routers:/app/routers
      - ./rag-orchestrator/services:/app/services
    depends_on:
      - postgres
      - embedding-api
      - redis
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
  pgadmin_data:
